"use client"
import { useState } from "react"
import { TrendingUp, TrendingDown } from "lucide-react"
import { Pie, PieChart } from "recharts"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { ChartConfig, ChartContainer, ChartTooltip, ChartTooltipContent } from "@/components/ui/chart"

interface PieChartComponentProps {
  title?: string
  description?: string
  data?: { [key: string]: string | number }[]
  dataKey?: string
  nameKey?: string
}

export const PieChartComponent = ({
  title = "Pie Chart",
  data = [
    { browser: "chrome", visitors: 275, fill: "var(--color-chrome)" },
    { browser: "safari", visitors: 200, fill: "var(--color-safari)" },
    { browser: "firefox", visitors: 187, fill: "var(--color-firefox)" },
    { browser: "edge", visitors: 173, fill: "var(--color-edge)" },
    { browser: "other", visitors: 90, fill: "var(--color-other)" },
  ],
  dataKey = "visitors",
  nameKey = "browser",
}: PieChartComponentProps) => {
  const [activeIndex, setActiveIndex] = useState<number | null>(null)

  const keys = data.length > 0 ? Object.keys(data[0]) : []
  const dynamicLabel = dataKey ? dataKey.toLowerCase() : "data"
  const dataCount = data.length

  // Function to calculate percentage change
  const calculatePercentageChange = (currentIndex: number) => {
    if (currentIndex <= 0 || currentIndex >= data.length) return 0
    const currentValue = Number(data[currentIndex]?.[dataKey]) || 0
    const previousValue = Number(data[currentIndex - 1]?.[dataKey]) || 0
    if (previousValue === 0) return 0
    return ((currentValue - previousValue) / previousValue) * 100
  }

  const percentageChange = activeIndex !== null && activeIndex > 0 ? calculatePercentageChange(activeIndex) : 0
  const isTrendingUp = percentageChange >= 0

  const determineTimePeriod = (data: { [key: string]: string | number }[]) => {
    const firstItem = data[0]
    const lastItem = data[data.length - 1]

    const startTime = firstItem[nameKey] as string
    const endTime = lastItem[nameKey] as string
    const descriptionParts = []
    if (startTime && endTime) {
      descriptionParts.push(`${startTime} - ${endTime} 2024`)
    }

    return descriptionParts.join(" ")
  }

  const dynamicDescription = determineTimePeriod(data)

  const chartConfig = {
    default: {
      label: "Value",
      color: "hsl(var(--chart-1))"
    }
  } satisfies ChartConfig

  return (
    <Card className="flex flex-col">
      <CardHeader className="items-center pb-0">
        <CardTitle>{title}</CardTitle>
        <CardDescription>{dynamicDescription}</CardDescription>
      </CardHeader>
      <CardContent className="flex-1 pb-0">
        <ChartContainer
          config={chartConfig}
          className="mx-auto aspect-square max-h-[250px]"
        >
          <PieChart
            onMouseMove={(state) => {
              setActiveIndex(state?.activeTooltipIndex ?? null)
            }}
            onMouseLeave={() => setActiveIndex(null)}
          >
            <ChartTooltip cursor={false} content={<ChartTooltipContent hideLabel />} />
            <Pie data={data} dataKey={dataKey} nameKey={nameKey} />
          </PieChart>
        </ChartContainer>
      </CardContent>
      <CardFooter className="flex-col gap-2 text-sm">
        <div className="flex items-center gap-2 font-medium leading-none">
          {isTrendingUp ? (
            <>Trending up by {percentageChange.toFixed(2)}% this period <TrendingUp className="h-4 w-4" /></>
          ) : (
            <>Trending down by {Math.abs(percentageChange).toFixed(2)}% this period <TrendingDown className="h-4 w-4" /></>
          )}
        </div>
        <div className="leading-none text-muted-foreground">
          Showing total {dynamicLabel} for the last {dataCount} periods
        </div>
      </CardFooter>
    </Card>
  )
}
