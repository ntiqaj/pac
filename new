"use client";

import { useState } from "react";
import { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Legend } from "recharts";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { ChartConfig, ChartContainer, ChartTooltipContent } from "@/components/ui/chart";

const stationEvents = [
  { category: "iPhone", associated: 5, disassociated: 4 },
  { category: "Watch", associated: 3, disassociated: 3 },
];

const chartConfig = {
  default: {
    label: "Count",
    color: "hsl(var(--chart-1))",
  },
} satisfies ChartConfig;

export const LineChartComponent = ({ data = stationEvents }) => {
  const [activeIndex, setActiveIndex] = useState<number | null>(null);

  const keys = data.length > 0 ? Object.keys(data[0]).filter((key) => key !== "category") : [];

  return (
    <Card>
      <CardHeader className="relative">
        <CardTitle>Station Events By Category</CardTitle>
        <CardDescription className="absolute top-0 right-0 p-4 bg-gray-50 border rounded-lg shadow-md max-w-xs z-10">
          <div>
            <strong className="text-lg font-semibold text-gray-800">Event Type</strong>
            <ul className="mt-2 space-y-1 text-gray-600">
              <li className="flex items-center">
                <span className="inline-block w-3 h-3 mr-2 bg-green-500 rounded-full"></span>
                Client associated
              </li>
              <li className="flex items-center">
                <span className="inline-block w-3 h-3 mr-2 bg-red-500 rounded-full"></span>
                Client disassociated
              </li>
            </ul>
          </div>
        </CardDescription>
      </CardHeader>
      <CardContent>
        <ChartContainer config={chartConfig}>
          <LineChart
            data={data}
            onMouseMove={(state) => {
              const index = state?.activeTooltipIndex;
              if (index !== undefined) {
                setActiveIndex(index); // Highlight the active line
              }
            }}
            onMouseLeave={() => setActiveIndex(null)} // Reset highlight when leaving
          >
            <CartesianGrid horizontal={false} vertical={false} />
            <XAxis dataKey="category" tickLine={false} tickMargin={10} axisLine={false} />
            <YAxis />
            <Tooltip content={<ChartTooltipContent hideLabel />} />
            <Legend />
            {keys.map((key, index) => (
              <Line
                key={key}
                dataKey={key}
                type="monotone"
                stroke={`hsl(var(--chart-${index + 1}))`}
                name={key.replace(/([A-Z])/g, " $1").trim()}
                strokeWidth={2}
                dot={false}
                activeDot={{ r: 6 }}
                style={{
                  opacity: activeIndex === index ? 1 : 0.7, // Highlight line opacity on hover
                  cursor: "pointer", // Only show pointer cursor on lines
                }}
              />
            ))}
          </LineChart>
        </ChartContainer>
      </CardContent>
      <CardFooter className="flex-col items-start gap-2 text-sm bg-gray-50">
        Showing event counts with dynamic data for each category.
      </CardFooter>
    </Card>
  );
};
