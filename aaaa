"use client"

import { useState } from "react" // Import useState for tracking active index
import { TrendingUp } from "lucide-react"
import { Bar, BarChart, CartesianGrid, XAxis, Tooltip } from "recharts"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { ChartConfig, ChartContainer, ChartTooltipContent } from "@/components/ui/chart"

const chartData = [
  { month: "January", machine: 10 },
  { month: "February", machine: 20 },
  { month: "March", machine: 40 },
  { month: "April", machine: 50 },
  { month: "May", machine: 30 },
]

const chartConfig = {
  default: {
    label: "Value",
    color: "hsl(var(--chart-1))"
  }
} satisfies ChartConfig

interface BarChartComponentProps {
  title?: string 
  description?: string 
  data?: { [key: string]: string | number }[] 
}

export const BarChartComponent = ({
  title = "Bar Chart",
  description = "January - June 2024",
  data = chartData
}: BarChartComponentProps) => {
  const [activeIndex, setActiveIndex] = useState<number | null>(null)

  const keys = data.length > 0 ? Object.keys(data[0]) : []
  const nameKey = keys[0] 
  const dataKey = keys[1] 
  const dynamicLabel = dataKey ? dataKey.toLowerCase() : "data"
  const dataCount = data.length

  const calculatePercentageChange = (index: number) => {
    if (index === 0 || index >= data.length) return 0

    const currentValue = parseFloat(String(data[index][dataKey])) || 0
    const previousValue = parseFloat(String(data[index - 1][dataKey])) || 0

    if (previousValue === 0) return 0

    const percentageChange = ((currentValue - previousValue) / previousValue) * 100
    return percentageChange
  }

  const percentageChange = activeIndex !== null ? calculatePercentageChange(activeIndex) : 0

  return (
    <Card>
      <CardHeader>
        <CardTitle>{title}</CardTitle>
        <CardDescription>{description}</CardDescription>
      </CardHeader>
      <CardContent>
        <ChartContainer config={chartConfig}>
          <BarChart
            accessibilityLayer
            data={data}
            onMouseMove={(state) => {
              if (state?.isTooltipActive) {
                setActiveIndex(state.activeTooltipIndex ?? null)
              } else {
                setActiveIndex(null)
              }
            }}
            onMouseLeave={() => setActiveIndex(null)}
          >
            <CartesianGrid vertical={false} />
            <XAxis
              dataKey={nameKey}
              tickLine={false}
              tickMargin={10}
              axisLine={false}
              tickFormatter={(value) => value.slice(0, 3)} 
            />
            <Tooltip
              cursor={false}
              content={<ChartTooltipContent hideLabel />}
            />
            <Bar dataKey={dataKey} fill="#C4B5FD" radius={8} />
          </BarChart>
        </ChartContainer>
      </CardContent>
      <CardFooter className="flex-col items-start gap-2 text-sm">
        <div className="flex gap-2 font-medium leading-none">
          Trending up by {percentageChange.toFixed(2)}% this month <TrendingUp className="h-4 w-4" />
        </div>
        <div className="leading-none text-muted-foreground">
          Showing total {dynamicLabel} for the last {dataCount} months
        </div>
      </CardFooter>
    </Card>
  )
}
