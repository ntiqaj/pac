"use client"

import { useState } from "react";
import { TrendingUp, TrendingDown } from "lucide-react";
import { Line, LineChart, CartesianGrid, XAxis } from "recharts";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  ChartConfig,
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
} from "@/components/ui/chart";

const chartData = [
  { month: "January", desktop: 186 },
  { month: "February", desktop: 305 },
  { month: "March", desktop: 237 },
  { month: "April", desktop: 73 },
  { month: "May", desktop: 209 },
  { month: "June", desktop: 214 },
];

const chartConfig = {
  desktop: { label: "Desktop", color: "hsl(var(--chart-1))" },
} satisfies ChartConfig;

const LineChartComponent = ({
  xAxisKey = "month",
  yAxisKey = "desktop",
  title = "Line Chart",
  data = chartData,
}: {
  xAxisKey?: string;
  yAxisKey?: string;
  title?: string;
  data?: { [key: string]: string | number }[];
}) => {
  const [activeIndex, setActiveIndex] = useState<number | null>(null);

  // Function to calculate percentage change
  const calculatePercentageChange = (currentIndex: number) => {
    if (currentIndex <= 0 || currentIndex >= data.length) return 0;
    const currentValue = Number(data[currentIndex]?.[yAxisKey]) || 0;
    const previousValue = Number(data[currentIndex - 1]?.[yAxisKey]) || 0;
    if (previousValue === 0) return 0;
    return ((currentValue - previousValue) / previousValue) * 100;
  };

  const percentageChange = activeIndex !== null && activeIndex > 0 ? calculatePercentageChange(activeIndex) : 0;
  const isTrendingUp = percentageChange >= 0;

  const dynamicDescription = `${data[0]?.[xAxisKey]} - ${data[data.length - 1]?.[xAxisKey]} 2024`;

  return (
    <Card>
      <CardHeader>
        <CardTitle>{title}</CardTitle>
        <CardDescription>{dynamicDescription}</CardDescription>
      </CardHeader>
      <CardContent>
        <ChartContainer config={chartConfig}>
          <LineChart data={data} margin={{ left: 12, right: 12 }}>
            <CartesianGrid vertical={false} />
            <XAxis
              dataKey={xAxisKey}
              tickLine={false}
              axisLine={false}
              tickMargin={8}
              tickFormatter={(value) => value.slice(0, 3)}
            />
            <ChartTooltip cursor={false} content={<ChartTooltipContent hideLabel />} />
            <Line dataKey={yAxisKey} type="natural" stroke="hsl(var(--chart-1))" strokeWidth={2} dot={false} />
          </LineChart>
        </ChartContainer>
      </CardContent>
      <CardFooter>
        <div className="flex items-center gap-2 font-medium leading-none">
          {isTrendingUp ? (
            <>Trending up by {percentageChange.toFixed(2)}% this period <TrendingUp className="h-4 w-4" /></>
          ) : (
            <>Trending down by {Math.abs(percentageChange).toFixed(2)}% this period <TrendingDown className="h-4 w-4" /></>
          )}
        </div>
        <div className="leading-none text-muted-foreground">
          Showing total visitors for the last {data.length} months
        </div>
      </CardFooter>
    </Card>
  );
};

export default LineChartComponent;
