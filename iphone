import React from 'react';
import { BarChart, Bar, XAxis, YAxis, Tooltip, Legend, CartesianGrid, ResponsiveContainer } from 'recharts';

const stationEvents = [
  {
    category: "iPhone",
    associated: 4,
    disassociated: 4
  },
  {
    category: "Watch",
    associated: 3,
    disassociated: 3
  }
];

export default function StationEventsChart() {
  return (
    <div className="p-4 bg-white rounded-2xl shadow-lg">
      <h2 className="text-xl font-bold mb-4">Station Events By Category</h2>
      <ResponsiveContainer width="100%" height={400}>
        <BarChart data={stationEvents}>
          <CartesianGrid strokeDasharray="3 3" />
          <XAxis dataKey="category" />
          <YAxis />
          <Tooltip />
          <Legend />
          <Bar dataKey="associated" fill="#c0c0a0" name="Client associated" />
          <Bar dataKey="disassociated" fill="#0a506d" name="Client disassociated" />
        </BarChart>
      </ResponsiveContainer>
    </div>
  );
}
"use client";

import { useState } from "react";
import { TrendingUp, TrendingDown } from "lucide-react";
import { BarChart, Bar, CartesianGrid, XAxis, YAxis, Tooltip, Legend } from "recharts";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { ChartConfig, ChartContainer, ChartTooltipContent } from "@/components/ui/chart";

const stationEvents = [
  { category: "iPhone", associated: 4, disassociated: 4 },
  { category: "Watch", associated: 3, disassociated: 3 }
];

const chartConfig = {
  default: {
    label: "Count",
    color: "hsl(var(--chart-1))"
  }
} satisfies ChartConfig;

export const StationEventsChart = () => {
  const [activeIndex, setActiveIndex] = useState<number | null>(null);

  return (
    <Card>
      <CardHeader>
        <CardTitle>Station Events By Category</CardTitle>
        <CardDescription>Event counts for devices in 2024</CardDescription>
      </CardHeader>
      <CardContent>
        <ChartContainer config={chartConfig}>
          <BarChart
            data={stationEvents}
            onMouseMove={(state) => setActiveIndex(state?.activeTooltipIndex ?? null)}
            onMouseLeave={() => setActiveIndex(null)}>
            <CartesianGrid vertical={false} />
            <XAxis dataKey="category" tickLine={false} tickMargin={10} axisLine={false} />
            <YAxis />
            <Tooltip content={<ChartTooltipContent hideLabel />} />
            <Legend />
            <Bar dataKey="associated" fill="#c0c0a0" radius={8} name="Client associated" />
            <Bar dataKey="disassociated" fill="#0a506d" radius={8} name="Client disassociated" />
          </BarChart>
        </ChartContainer>
      </CardContent>
      <CardFooter className="flex-col items-start gap-2 text-sm">
        Showing event counts for the selected period.
      </CardFooter>
    </Card>
  );
};
"use client";

import { useState } from "react";
import { TrendingUp, TrendingDown } from "lucide-react";
import { BarChart, Bar, CartesianGrid, XAxis, YAxis, Tooltip, Legend } from "recharts";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { ChartConfig, ChartContainer, ChartTooltipContent } from "@/components/ui/chart";

const stationEvents = [
  { category: "iPhone", type: "Client associated", count: 4 },
  { category: "iPhone", type: "Client disassociated", count: 4 },
  { category: "Watch", type: "Client associated", count: 3 },
  { category: "Watch", type: "Client disassociated", count: 3 }
];

const chartConfig = {
  default: {
    label: "Count",
    color: "hsl(var(--chart-1))"
  }
} satisfies ChartConfig;

export const StationEventsChart = () => {
  const [activeIndex, setActiveIndex] = useState<number | null>(null);

  return (
    <Card>
      <CardHeader>
        <CardTitle>Station Events By Category</CardTitle>
        <CardDescription>Event counts for devices in 2024</CardDescription>
      </CardHeader>
      <CardContent>
        <ChartContainer config={chartConfig}>
          <BarChart
            data={stationEvents}
            onMouseMove={(state) => setActiveIndex(state?.activeTooltipIndex ?? null)}
            onMouseLeave={() => setActiveIndex(null)}>
            <CartesianGrid vertical={false} />
            <XAxis dataKey="category" tickLine={false} tickMargin={10} axisLine={false} />
            <YAxis />
            <Tooltip content={<ChartTooltipContent hideLabel />} />
            <Legend />
            <Bar dataKey="count" stackId="a" fill="#c0c0a0" name="Client associated" />
            <Bar dataKey="count" stackId="a" fill="#0a506d" name="Client disassociated" />
          </BarChart>
        </ChartContainer>
      </CardContent>
      <CardFooter className="flex-col items-start gap-2 text-sm">
        Showing event counts with stacked bars for each category.
      </CardFooter>
    </Card>
  );
};

