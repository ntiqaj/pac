"use client";
import React, { useState } from "react";
import { Pie } from "react-chartjs-2";
import { Chart as ChartJS, ArcElement, Tooltip, Legend } from "chart.js";

// Register Chart.js components
ChartJS.register(ArcElement, Tooltip, Legend);

// Define TypeScript Interface for KPI data
interface KPIItem {
  title: string;
  value: string;
}

const KPI = () => {
  // KPI Data with Type
  const kpiData: KPIItem[] = [
    { title: "Revenue", value: "$500K" },
    { title: "Users", value: "12,000" },
    { title: "Orders", value: "1,500" },
    { title: "Conversion Rate", value: "5.2%" },
  ];

  // State for Modal
  const [selectedKPI, setSelectedKPI] = useState<KPIItem | null>(null);

  // Chart Data
  const getChartData = (title: string) => {
    return {
      labels: ["Category A", "Category B", "Category C"],
      datasets: [
        {
          data: [Math.random() * 100, Math.random() * 100, Math.random() * 100],
          backgroundColor: ["#FF6384", "#36A2EB", "#FFCE56"],
        },
      ],
    };
  };

  return (
    <div className="flex justify-center flex-wrap p-5 gap-5">
      {kpiData.map((kpi, index) => (
        <div
          key={index}
          className="bg-[#D2B48C] p-5 rounded-lg shadow-md text-center w-44 cursor-pointer"
          onClick={() => setSelectedKPI(kpi)}
        >
          <h3 className="text-lg text-gray-800 mb-2 font-semibold">
            {kpi.title}
          </h3>
          <p className="text-xl font-bold text-blue-700">{kpi.value}</p>
        </div>
      ))}

      {/* Modal */}
      {selectedKPI && (
        <div className="fixed top-0 left-0 w-full h-full flex items-center justify-center bg-black bg-opacity-50">
          <div className="bg-white p-6 rounded-lg shadow-lg w-96 relative">
            <button
              className="absolute top-2 right-2 text-red-500 font-bold"
              onClick={() => setSelectedKPI(null)}
            >
              âœ–
            </button>
            <h2 className="text-xl font-bold text-gray-700 mb-4">
              {selectedKPI.title} Data
            </h2>
            <Pie data={getChartData(selectedKPI.title)} />
          </div>
        </div>
      )}
    </div>
  );
};

export default KPI;

{
  render: () => <Dialog>
      <DialogTrigger asChild>
        <Button variant="outline">Edit Profile</Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>Edit profile</DialogTitle>
          <DialogDescription>
            Make changes to your profile here. Click save when you&apos;re done.
          </DialogDescription>
        </DialogHeader>
        <div className="grid gap-4 py-4">
          <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="name" className="text-right">
              Name
            </Label>
            <Input id="name" defaultValue="Pedro Duarte" className="col-span-3" />
          </div>
          <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="username" className="text-right">
              Username
            </Label>
            <Input id="username" defaultValue="@peduarte" className="col-span-3" />
          </div>
        </div>
        <DialogFooter>
          <Button type="submit">Save changes</Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
}


"use client";
import React, { useState } from "react";
import { Pie } from "react-chartjs-2";
import { Chart as ChartJS, ArcElement, Tooltip, Legend } from "chart.js";
import {
  Dialog,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";

// Register Chart.js components
ChartJS.register(ArcElement, Tooltip, Legend);

// Define TypeScript Interface for KPI data
interface KPIItem {
  title: string;
  value: string;
}

const KPI = () => {
  // KPI Data with Type
  const kpiData: KPIItem[] = [
    { title: "Revenue", value: "$500K" },
    { title: "Users", value: "12,000" },
    { title: "Orders", value: "1,500" },
    { title: "Conversion Rate", value: "5.2%" },
  ];

  // State for Modal
  const [selectedKPI, setSelectedKPI] = useState<KPIItem | null>(null);

  // Chart Data
  const getChartData = (title: string) => {
    return {
      labels: ["Category A", "Category B", "Category C"],
      datasets: [
        {
          data: [Math.random() * 100, Math.random() * 100, Math.random() * 100],
          backgroundColor: ["#FF6384", "#36A2EB", "#FFCE56"],
        },
      ],
    };
  };

  return (
    <div className="flex justify-center flex-wrap p-5 gap-5">
      {kpiData.map((kpi, index) => (
        <Dialog key={index}>
          <DialogTrigger asChild>
            <div
              className="bg-[#D2B48C] p-5 rounded-lg shadow-md text-center w-44 cursor-pointer"
              onClick={() => setSelectedKPI(kpi)}
            >
              <h3 className="text-lg text-gray-800 mb-2 font-semibold">
                {kpi.title}
              </h3>
              <p className="text-xl font-bold text-blue-700">{kpi.value}</p>
            </div>
          </DialogTrigger>
          {selectedKPI && (
            <DialogContent className="sm:max-w-[425px]">
              <DialogHeader>
                <DialogTitle>{selectedKPI.title} Data</DialogTitle>
                <DialogDescription>
                  Below is the data visualization for {selectedKPI.title}.
                </DialogDescription>
              </DialogHeader>
              <Pie data={getChartData(selectedKPI.title)} />
              <DialogFooter>
                <Button onClick={() => setSelectedKPI(null)}>Close</Button>
              </DialogFooter>
            </DialogContent>
          )}
        </Dialog>
      ))}
    </div>
  );
};

export default KPI;


import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-xl border bg-card text-card-foreground shadow",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
