"use client"

import { useState } from "react"
import { TrendingUp, TrendingDown } from "lucide-react"
import { Line, LineChart, CartesianGrid, XAxis, Tooltip } from "recharts" // Changed BarChart import to LineChart
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { ChartConfig, ChartContainer, ChartTooltipContent } from "@/components/ui/chart"

const chartData = [
  { day: "Monday", pen: 16 },
  { day: "Tuesday", pen: 305 },
  { day: "Wednesday", pen: 237 },
  { day: "Thursday", pen: 73 },
  { day: "Friday", pen: 209 },
  { day: "Saturday", pen: 214 }
]

const chartConfig = {
  default: {
    label: "Value",
    color: "hsl(var(--chart-1))"
  }
} satisfies ChartConfig

interface LineChartComponentProps { // Changed from BarChartComponentProps to LineChartComponentProps
  title?: string
  description?: string
  data?: { [key: string]: string | number }[]
}

export const LineChartComponent = ({ // Changed BarChartComponent to LineChartComponent
  title = "Line Chart", // Updated the title to Line Chart
  data = chartData
}: LineChartComponentProps) => { // Changed from BarChartComponentProps to LineChartComponentProps
  const [activeIndex, setActiveIndex] = useState<number | null>(null)

  const keys = data.length > 0 ? Object.keys(data[0]) : []
  const nameKey = keys[0]
  const dataKey = keys[1]
  const dynamicLabel = dataKey ? dataKey.toLowerCase() : "data"
  const dataCount = data.length

  const calculatePercentageChange = (currentIndex: number) => {
    if (currentIndex <= 0 || currentIndex >= data.length) return 0
    const currentValue = Number(data[currentIndex]?.[dataKey]) || 0
    const previousValue = Number(data[currentIndex - 1]?.[dataKey]) || 0
    if (previousValue === 0) return 0
    return ((currentValue - previousValue) / previousValue) * 100
  }

  const percentageChange =
